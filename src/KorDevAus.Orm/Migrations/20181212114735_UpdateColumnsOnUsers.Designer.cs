// <auto-generated />
using System;
using KorDevAus.Orm;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KorDevAus.Orm.Migrations
{
    [DbContext(typeof(KdaDbContext))]
    [Migration("20181212114735_UpdateColumnsOnUsers")]
    partial class UpdateColumnsOnUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KorDevAus.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnName("CampaignId");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateUpdated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnName("Description");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsPublic")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxAttendees")
                        .HasColumnName("MaxAttendees");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(128);

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<Guid?>("VenueId")
                        .HasColumnName("VenueId");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("KorDevAus.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateUpdated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("Slug")
                        .HasMaxLength(128);

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("KorDevAus.Entities.GroupUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTimeOffset>("DateJoined")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateJoined")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateUpdated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("GroupId")
                        .HasColumnName("GroupId");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupUsers");
                });

            modelBuilder.Entity("KorDevAus.Entities.Meetup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateUpdated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnName("Slug")
                        .HasMaxLength(128);

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Meetups");
                });

            modelBuilder.Entity("KorDevAus.Entities.MeetupEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateUpdated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("EventId")
                        .HasColumnName("EventId");

                    b.Property<Guid>("MeetupId")
                        .HasColumnName("MeetupId");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MeetupId");

                    b.ToTable("MeetupEvents");
                });

            modelBuilder.Entity("KorDevAus.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTimeOffset>("DateJoined")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateJoined")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateUpdated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsOrganiser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsOrganiser")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MeetupId")
                        .HasColumnName("MeetupId");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MeetupId");

                    b.HasIndex("UserId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("KorDevAus.Entities.Rsvp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateUpdated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("EventId")
                        .HasColumnName("EventId");

                    b.Property<bool>("IsHost")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsHost")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MemberId")
                        .HasColumnName("MemberId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberId");

                    b.ToTable("Rsvps");
                });

            modelBuilder.Entity("KorDevAus.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<Guid>("ActiveDirectoryId")
                        .HasColumnName("ActiveDirectoryId");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateUpdated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("DisplayName")
                        .HasMaxLength(256);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FirstName")
                        .HasMaxLength(128);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName")
                        .HasMaxLength(128);

                    b.Property<string>("MailChimpId")
                        .IsRequired()
                        .HasColumnName("MailChimpId")
                        .HasMaxLength(64);

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnName("ProfileImageUrl");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KorDevAus.Entities.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnName("Address1")
                        .HasMaxLength(256);

                    b.Property<string>("Address2")
                        .HasColumnName("Address2")
                        .HasMaxLength(256);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("Country")
                        .HasMaxLength(32);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateUpdated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnName("Postcode")
                        .HasMaxLength(4);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnName("State")
                        .HasMaxLength(4);

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnName("Suburb")
                        .HasMaxLength(64);

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("KorDevAus.Entities.Waitlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateCreated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTimeOffset>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DateUpdated")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("EventId")
                        .HasColumnName("EventId");

                    b.Property<bool>("IsShortlisted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsShortlisted")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MemberId")
                        .HasColumnName("MemberId");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberId");

                    b.ToTable("Waitlists");
                });

            modelBuilder.Entity("KorDevAus.Entities.Event", b =>
                {
                    b.HasOne("KorDevAus.Entities.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId");
                });

            modelBuilder.Entity("KorDevAus.Entities.GroupUser", b =>
                {
                    b.HasOne("KorDevAus.Entities.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KorDevAus.Entities.User", "User")
                        .WithMany("GroupUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KorDevAus.Entities.MeetupEvent", b =>
                {
                    b.HasOne("KorDevAus.Entities.Event", "Event")
                        .WithMany("MeetupEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KorDevAus.Entities.Meetup", "Meetup")
                        .WithMany("MeetupEvents")
                        .HasForeignKey("MeetupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KorDevAus.Entities.Member", b =>
                {
                    b.HasOne("KorDevAus.Entities.Meetup", "Meetup")
                        .WithMany("Members")
                        .HasForeignKey("MeetupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KorDevAus.Entities.User", "User")
                        .WithMany("Members")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KorDevAus.Entities.Rsvp", b =>
                {
                    b.HasOne("KorDevAus.Entities.Event", "Event")
                        .WithMany("Rsvps")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KorDevAus.Entities.Member", "Member")
                        .WithMany("Rsvps")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KorDevAus.Entities.Waitlist", b =>
                {
                    b.HasOne("KorDevAus.Entities.Event", "Event")
                        .WithMany("Waitlists")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KorDevAus.Entities.Member", "Member")
                        .WithMany("Waitlists")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
